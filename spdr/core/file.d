module spdr.core.file;
import spdr.core.base;
import std.typecons;

///
struct File
{
	/// Name of the file
	string filename;
	/// Whether the file exists
	bool exist;
}

/// Represents a file that can be used as dependency
class FileTaskBase : TaskBase!(File)
{
protected:
	Hash hash_;
	File result;
	@trusted void resolveImpl(string filename, ref const(Hash) hash_base) {
		import std.file : exists;
		import std.digest : makeDigest;
		import std.digest.sha : SHA256;

		result.exist = filename.exists;
		result.filename = filename;
		auto sha = makeDigest!SHA256;
		sha.put(hash_base[]);
		sha.put(cast(ubyte) result.exist);
		if (result.exist)
		{
			import std.stdio : ioFile = File;

			auto inf = ioFile(filename);
			foreach (ubyte[] buf; inf.byChunk(4096))
			{
				sha.put(buf);
			}
		}
		hash_ = sha.finish;
		resolved_ = true;
	}

public:
	override ref const(Hash) hash() const in (resolved) {
		return hash_;
	}

	override inout(File) value() inout in (resolved) {
		return result;
	}

}

/// Models an external file. Since this is a file out of our control, this task is impure
final class ExternalFile : FileTaskBase
{
public:
	override void resolve() {
		resolveImpl(dep.value.value, dep.value.hash);
	}
	mixin DependentTaskMixin!string;
}

/// Models an output file from some other task. Since this is a file generated by a
/// dependency, this task is pure
final class TaskOutputFile(D) : FileTaskBase
{
public:
	override void resolve() {
		resolveImpl(dep.value.value[1], dep.value.hash);
	}
	mixin DependentTaskMixin!(D, string);
	override ubyte[] serialize() { return []; } // TODO
	override bool deserialize() { return true; } // TODO
}

/// Represent the file listing inside a directory
version (none) final class DepDirEntries : DepValue!(string[])
{
private:
	string[] result;
	DepValue!string path;
public:

}

unittest
{
	import std.stdio : writeln;
	import spdr.core.base : recursivelyResolve;

	auto exename = "/usr/bin/ls".toConstTask;
	auto exe = new ExternalFile(exename);

	exe.recursivelyResolve;
	writeln(exe.value);
}
